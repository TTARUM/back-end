name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ttarum-back
  ECR_REPOSITORY: ttarum
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ec2-user
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to EC2
        run: |
          # Save private key to a file
          KEY_FILE=$(mktemp)
          echo "$SSH_PRIVATE_KEY" > "$KEY_FILE"
          chmod 600 "$KEY_FILE"
          
          # Save image name to a file
          echo "IMAGE_NAME=${{ steps.build-image.outputs.image }}" > .env

          # Deploy using docker-compose on the EC2 instance
          scp -o StrictHostKeyChecking=no -i "$KEY_FILE" docker-compose.yml $EC2_USER@$EC2_HOST:/tmp/docker-compose.yml
          scp -o StrictHostKeyChecking=no -i "$KEY_FILE" .env $EC2_USER@$EC2_HOST:/tmp/.env
          ssh -o StrictHostKeyChecking=no -i "$KEY_FILE" $EC2_USER@$EC2_HOST "
            docker compose -f /tmp/docker-compose.yml --env-file /tmp/.env pull
            docker compose -f /tmp/docker-compose.yml --env-file=/tmp/.env up
          "

          # Clean up the private key file
          rm "$KEY_FILE"